# We deliberately don't use travis's language=python option because
# we install miniconda and use conda to get python. Additionally,
# Travis's auto-install of python doesn't work on osx images (see
# https://github.com/travis-ci/travis-ci/issues/4729).
git:
  depth: 100

language: generic

os:
  - linux
arch:
  - arm64
dist: xenial

notifications:
  email:
    on_failure: change # [always|never|change] default: always

env:
  global:
    - PYENV_VERSION=3.7
    - PKG_TEST_PYTHON="--test-python=py36 --test-python=py27"
    - CHANS_DEV="-c pyviz/label/dev -c conda-forge"
    - CHANS="-c pyviz"
    - MPLBACKEND="Agg"
    - PYTHON_VERSION=3.6

stages:
  - test
  - name: extra_tests
    if: type = cron
  - name: conda_dev_package
    if: tag =~ ^v(\d+|\.)*[a-z]\d*$
  - name: pip_dev_package
    if: tag =~ ^v(\d+|\.)*[a-z]\d*$
  - name: conda_package
    if: tag =~ ^v(\d+|\.)*[^a-z]\d*$
  - name: pip_package
    if: tag =~ ^v(\d+|\.)*[^a-z]\d*$
  - name: docs
    if: tag =~ ^v(\d+|\.)*[^a-z]\d*$
  - name: gallery
    if: tag =~ ^v(\d+|\.)*[^a-z]\d*$
  - name: docs_dev
    if: tag =~ ^v(\d+|\.)*[a-z]\d*$
  - name: gallery_dev
    if: tag =~ ^v(\d+|\.)*[a-z]\d*$
  - name: docs_daily
    if: (type = cron OR commit_message =~ /\[doc-build\]/)
  - name: gallery_daily
    if: (type = cron OR commit_message =~ /\[doc-build\]/)

jobs:
  include:
    ########## Test Stage ##########

    - &default
      stage: test
      env: DESC="Python 3.6 tests" HV_REQUIREMENTS="unit_tests" PYTHON_VERSION=3.6
      before_install:
        - sudo pip install flake8
        - which flake8
        - sudo which flake8
        - sudo pip install pyctdev
        - wget "https://github.com/Archiconda/build-tools/releases/download/0.2.3/Archiconda3-0.2.3-Linux-aarch64.sh" -O archiconda.sh
        - chmod +x archiconda.sh
        - bash archiconda.sh -b -p $HOME/miniconda
        - export PATH="$HOME/miniconda/bin:$PATH" && hash -r
        - conda config --set always_yes True
        - sudo ln -s $HOME/miniconda/bin/conda /usr/bin/
        - sudo doit ecosystem_setup
      install:
        - doit env_create $CHANS_DEV --python=$PYTHON_VERSION
        - source activate test-environment
        - travis_wait 20 doit develop_install $CHANS_DEV -o $HV_REQUIREMENTS
        - doit env_capture
      script:
        - doit test_all_recommended
      after_success: coveralls
      after_failure: sleep 10

    - <<: *default
      env: DESC="Python 2.7 tests" PYTHON_VERSION=2.7 HV_REQUIREMENTS="unit_tests"

    - &basic_deps
      <<: *default
      stage: extra_tests
      env: DESC="Basic dependencies" HV_REQUIREMENTS="basic_tests"
      after_success: echo "Success"

    ########## DOCS ##########

    - &doc_build
      <<: *default
      stage: docs_dev
      env: DESC="docs" CHANS_DEV="-c pyviz/label/dev" HV_DOC_GALLERY='false' HV_DOC_REF_GALLERY='false' HV_REQUIREMENTS="doc" PANEL_EMBED='true' PANEL_EMBED_JSON='true' PANEL_EMBED_JSON_PREFIX='json'
      script:
        - bokeh sampledata
        - conda install -c conda-forge awscli
        - nbsite generate-rst --org pyviz --project-name holoviews --skip ^reference
        - nbsite build --what=html --output=builtdocs
      after_success:
        - aws s3 sync ./ s3://holoviews-doc-builds/$TRAVIS_BUILD_NUMBER --exclude=".git/*" --exclude="doc/nbpublisher/*"

    - &gallery_build
      <<: *doc_build
      stage: gallery_dev
      env: DESC="gallery" CHANS_DEV="-c pyviz/label/dev" HV_REQUIREMENTS="doc" BUCKET="dev."
      script:
        - bokeh sampledata
        - conda install -c conda-forge awscli
        - conda install -c conda-forge mpl_sample_data --no-deps
        - aws s3 sync s3://holoviews-doc-builds/$TRAVIS_BUILD_NUMBER ./
        - git reset --hard --recurse-submodule
        - nbsite build --what=html --output=builtdocs
      after_success:
        - aws s3 sync ./builtdocs s3://${BUCKET}holoviews.org/
        - aws s3 rm --recursive s3://holoviews-doc-builds/$TRAVIS_BUILD_NUMBER

    - <<: *doc_build
      stage: docs_daily

    - <<: *gallery_build
      stage: gallery_daily
      env: DESC="gallery" CHANS_DEV="-c pyviz/label/dev" HV_DOC_GALLERY='false' HV_DOC_REF_GALLERY='false' HV_REQUIREMENTS="doc" BUCKET="build."

    - <<: *doc_build
      stage: docs

    - <<: *gallery_build
      stage: gallery
      env: DESC="gallery" CHANS_DEV="-c pyviz/label/dev" HV_REQUIREMENTS="doc"
      after_success:
        - aws s3 sync ./builtdocs s3://holoviews.org/

    ########## END-USER PACKAGES ##########

    ### CONDA ####

    - &conda_pkg
      <<: *default
      stage: conda_dev_package
      env: DESC="" TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install:
        - doit package_build $CHANS_DEV --no-pkg-tests
      script:
        - doit package_upload --token=$CONDA_UPLOAD_TOKEN --label=dev

    - <<: *conda_pkg
      stage: conda_package
      env: DESC="" TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install:
        - doit package_build $CHANS_DEV --no-pkg-tests
      script:
        - doit package_upload --token=$CONDA_UPLOAD_TOKEN --label=dev --label=main

    ### PyPI ###

    - &pip_pkg
      <<: *default
      stage: pip_dev_package
      env: PYPI="https://test.pypi.org/legacy/" TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install:
        - travis_wait 30 doit develop_install $CHANS_DEV -o unit_tests && pip uninstall -y holoviews
        - doit pip_on_conda
        - doit ecosystem=pip package_build
      script: doit ecosystem=pip package_upload -u $TPPU -p $TPPP -r ${PYPI}

    - <<: *pip_pkg
      stage: pip_package
      env: PYPI="https://upload.pypi.org/legacy/" TRAVIS_NOCACHE=$TRAVIS_JOB_ID
      install:
        - travis_wait 30 doit develop_install $CHANS_DEV -o unit_tests && pip uninstall -y holoviews
        - doit pip_on_conda
        - doit ecosystem=pip package_build
      script: doit ecosystem=pip package_upload -u $PPU -p $PPP -r ${PYPI}
